/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.course6.eindopdracht6;

import com.univocity.parsers.tsv.TsvParser;
import com.univocity.parsers.tsv.TsvParserSettings;
import java.awt.Toolkit;
import java.net.*;
import java.io.*;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;

class TSVFilter extends javax.swing.filechooser.FileFilter {

    @Override
    public boolean accept(File file) {
        // Allow only directories, or files with ".txt" extension
        return file.isDirectory() || file.getAbsolutePath().endsWith(".tsv");
    }

    @Override
    public String getDescription() {
        return "Tab Seperated Files (*.tsv)";
    }
}

/**
 *
 * @author Thijs Weenink
 * @version 1.1
 * <p>
 * <b>A application made to be abble to search virus-ids based on the
 * host</b></p>
 * Sort the host-ids from a .tsv file to see which virus-ids belong to the host.
 * <br>Select a virus-id to see more detailed information (this feature requires
 * internet)
 * <p>
 * Known bugs:</p>
 * - none
 */
public class VirusGUI extends javax.swing.JFrame {

    /**
     * Creates new form VirusGUI
     */
    public VirusGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        sortingOptionButtonGroup = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        fileOrURLTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        viralClassComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        hostComboBox1 = new javax.swing.JComboBox<>();
        hostComboBox2 = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        hostList2 = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        hostList1 = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        intersectionJList = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        virusRadioButton = new javax.swing.JRadioButton();
        classRadioButton = new javax.swing.JRadioButton();
        numberOfHostsRadioButton = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        fileOpenMenu = new javax.swing.JMenuItem();

        fileChooser.setFileFilter(new TSVFilter());

        sortingOptionButtonGroup.add(virusRadioButton);
        sortingOptionButtonGroup.add(classRadioButton);
        sortingOptionButtonGroup.add(numberOfHostsRadioButton);
        virusRadioButton.setSelected(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Virus Applicatie");
        setIconImage(Toolkit.getDefaultToolkit().getImage("D:/gntop2.gif")
        );
        setResizable(false);

        jLabel1.setText("URL:");

        fileOrURLTextField.setText("ftp://ftp.genome.jp/pub/db/virushostdb/virushostdb.tsv");
        fileOrURLTextField.setToolTipText("Web URL which contains a tsv page, loading in new webpages might take a bit");
        fileOrURLTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fileOrURLTextFieldKeyPressed(evt);
            }
        });

        jLabel2.setText("Viral Classification");

        viralClassComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "none", "dsRNA", "dsDNA", "ssRNA", "ssDNA", "Retrovirus", "Satellite virus and Virophage", "Viroid", "Other" }));
        viralClassComboBox.setToolTipText("none");
        viralClassComboBox.setEnabled(false);
        viralClassComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viralClassComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("Host ID:");

        hostComboBox1.setEnabled(false);
        hostComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostComboBox1ActionPerformed(evt);
            }
        });

        hostComboBox2.setEnabled(false);
        hostComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostComboBox2ActionPerformed(evt);
            }
        });

        jSeparator1.setForeground(java.awt.Color.black);

        hostList2.setToolTipText("Viruslist host 2");
        hostList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                hostList2ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(hostList2);

        hostList1.setToolTipText("Viruslist host 1");
        hostList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                hostList1ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(hostList1);

        intersectionJList.setToolTipText("Virusses that are in both lists");
        intersectionJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                intersectionJListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(intersectionJList);

        jLabel4.setText("Virusses that can infect both hosts");

        jLabel5.setText("Sorting options");

        virusRadioButton.setText("Virus ID");
        virusRadioButton.setToolTipText("Sorts the viruslists on virus ID");
        virusRadioButton.setEnabled(false);
        virusRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                virusRadioButtonActionPerformed(evt);
            }
        });

        classRadioButton.setText("Classification");
        classRadioButton.setToolTipText("Sorts the viruslists on classification");
        classRadioButton.setEnabled(false);
        classRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classRadioButtonActionPerformed(evt);
            }
        });

        numberOfHostsRadioButton.setText("Number of hosts");
        numberOfHostsRadioButton.setToolTipText("Sorts the viruslists on the number of hosts");
        numberOfHostsRadioButton.setEnabled(false);
        numberOfHostsRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberOfHostsRadioButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        fileOpenMenu.setText("Open");
        fileOpenMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileOpenMenuActionPerformed(evt);
            }
        });
        jMenu1.add(fileOpenMenu);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(hostComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(hostComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(fileOrURLTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(viralClassComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(virusRadioButton)
                            .addComponent(classRadioButton)
                            .addComponent(numberOfHostsRadioButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, jScrollPane2, jScrollPane3});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fileOrURLTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(viralClassComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hostComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hostComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(virusRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(classRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(numberOfHostsRadioButton)))
                .addContainerGap(132, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jScrollPane1, jScrollPane2, jScrollPane3});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //<editor-fold defaultstate="collapsed" desc="Caching of webpage and settings">
    private void caching() {
        //Make a new cache dir if it doesnt already exists
        new File(Paths.get(".").toAbsolutePath().normalize().toString() + "/cache").mkdir();

        // The webpage gets stored in a cache file, this does some checks for it
        try {
            FileReader fileReader = new FileReader(Paths.get(".").toAbsolutePath().normalize().toString() + "/cache/webpageCache.txt");
            try {
                BufferedReader br = new BufferedReader(fileReader);
                if (br.readLine() != null) {
                    webpageCached = true;
                }
            } catch (IOException ex) {
                Logger.getLogger(VirusGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            System.out.println("Webpage cache file not found, making one...");
            File file = new File(Paths.get(".").toAbsolutePath().normalize().toString() + "/cache/webpageCache.txt");
            try {
                file.createNewFile();
            } catch (IOException ex1) {
                Logger.getLogger(VirusGUI.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
        // Indicates if the cache files are made
        madeCacheFiles = true;
    }

    // Writes the .tsv contents to the cache file
    // Due to problems with reading the webpage or filechosser file directly (and not being able to trace the problem and fix it) every file gets wirtten to cache
    private void fileWriting(List<String[]> data) {
        try {
            System.out.println("filewriting");
            FileWriter fileWriter = new FileWriter(Paths.get(".").toAbsolutePath().normalize().toString() + "/cache/webpageCache.txt");
            fileWriter.write("");
            for (String[] lineArray : data) {
                String tempFormatString = "";
                for (String item : lineArray) {
                    tempFormatString += (item + "$");
                }
                fileWriter.append(tempFormatString + System.lineSeparator());
            }
            fileWriter.close();
        } catch (IOException ex) {
            Logger.getLogger(VirusGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        //System.out.println("als die hier komt is het fout");
        webpageCached = true;
    }

    // Makes and writes the config.properties file for saving of the web url
    private void setConfigFile() {
        String webURL = fileOrURLTextField.getText();
        Properties prop = new Properties();
        OutputStream output = null;

        try {

            output = new FileOutputStream("config.properties");

            // set the properties value
            prop.setProperty("webURL", webURL);

            // save properties to project root folder
            prop.store(output, null);

        } catch (IOException io) {
            System.out.println(io.getMessage());;
        } finally {
            if (output != null) {
                try {
                    output.close();
                } catch (IOException e) {
                    System.out.println(e.getMessage());;
                }
            }

        }

    }

    // Returns the web url from the config.properties file
    private String getWebURLConfig() {
        Properties prop = new Properties();
        InputStream input = null;
        String WebURL = null;

        try {
            input = new FileInputStream("config.properties");

            // load a properties file
            prop.load(input);

            // get the property value and print it out
            WebURL = prop.getProperty("webURL");
        } catch (Exception exc) {
            // Non-user input exception, any exception probably means there isn't a config file to begin with
            webpageCached = false;
            System.out.println("boolean webpageCached: " + webpageCached);
            setConfigFile();
        }
        try {
            input.close();
        } catch (IOException exc) {
            System.out.println(exc);
        } catch (Exception ec) {

        }

        return WebURL;
    }

    // ***** End of file and settings caching *****
    //</editor-fold>
    // GUI if-else for file reading
    private void GUILogic(boolean webURL) {
        if (!madeCacheFiles) {
            caching();
        }
//        System.out.println("\nboolean webpageCache in guilogic: " + webpageCached);

        String urlOutput = fileOrURLTextField.getText();
        virusList = new ArrayList<>();
        TsvParserSettings settings = new TsvParserSettings();
        TsvParser parser = new TsvParser(settings);
        boolean canContinue = true;

        if (webURL && !webpageCached) {
            try {
                System.out.println("Mode: Web URL, non-cached");
                URL website = new URL(urlOutput);
                setConfigFile();

                List<String[]> parsedRows = parser.parseAll(new InputStreamReader(website.openStream()));
                if (!parsedRows.get(0)[0].startsWith("<")) {

                    fileWriting(parsedRows);
                    setVirusList();
                } else {
                    System.out.println("This is not a tsv weburl");
                    canContinue = false;
                }

            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }
        } else if (webURL && webpageCached) {
            setVirusList();
        } else {
            try {
                System.out.println("Mode: File by File Chooser" + filePath);
                List<String[]> parsedRows = parser.parseAll(new FileReader(filePath));
                try {
                    String test = parsedRows.get(0)[0];
                    if (!"virus tax id".equals(test)) {
                        canContinue = false;
                        System.out.println("Incorrect file format");
                    } else {
                        fileWriting(parsedRows);
                        setVirusList();
                    }
                } catch (Exception exc) {
                    System.out.println("Error: " + exc.toString());
                }
            } catch (FileNotFoundException ex) {
                System.out.println("File not found");
            }
        }
        System.out.println("Done with GUILogic if-else");

        if (canContinue) {
            assignGlobalVars();
        }
    }

    // Assigns all the global variables
    private void assignGlobalVars() {
        List<String> virusTaxIDs = new ArrayList<>();

        for (Virus v : virusList) {
            virusTaxIDs.add(v.getVirusTaxID());
        }

        hostInfo = VirusLogic.getHostInfo(virusList);
        // This map has all the virus-ids as value with the host-id as keys
        hostAndVirus = VirusLogic.getXtoVirusIdents(virusList);
        // This map has all the virus-ids as value with the classification as keys
        virusClass = VirusLogic.getVirusClass(virusList);

        // Fills the comboboxes with data
        hostComboBoxesFilling(hostInfo);

        // This map has the frequency of hosts for each virus-id
        sortedVirusHostFreq = VirusLogic.sortByValue(VirusLogic.getFreq(virusTaxIDs));

        // Updates the jLists
        updateDataLists();
        // Enables the user options
        enableOptions();

        System.out.println("Global variable assignment done");

    }

    // Set the global variable "virusList"
    private void setVirusList() {
        try {
            // Due to problems with reading the webpage or filechosser file directly (and not being able to trace the problem and fix it) it needs to read it from the cache
//            System.out.println("setViruslist method");
            BufferedReader br = new BufferedReader(new FileReader(Paths.get(".").toAbsolutePath().normalize().toString() + "/cache/webpageCache.txt"));
            String line;

            while ((line = br.readLine()) != null) {
                String[] lineArray = line.split("\\$");
                if (!"virus tax id".equals(lineArray[0])) {
                    virusList.add(new Virus(lineArray));
                }

            }
            br.close();
        } catch (FileNotFoundException ex) {
            System.out.println("The file was not found" + System.lineSeparator() + "(" + ex.toString() + ")");
        } catch (IOException exc) {
            System.out.println("IO Error" + System.lineSeparator() + "(" + exc.toString() + ")");
        } catch (ArrayIndexOutOfBoundsException exc) {
            System.out.println("This file is not supported by the application" + System.lineSeparator() + "(" + exc.toString() + ")");
        } catch (Exception exc) {
            System.out.println("Unknown error: " + exc.toString());
        }
    }

    // Enables some of the sorting/user input options
    private void enableOptions() {
        // If you cant acces the options, you cant change them and cause errors
        viralClassComboBox.setEnabled(true);
        virusRadioButton.setEnabled(true);
        classRadioButton.setEnabled(true);
        numberOfHostsRadioButton.setEnabled(true);
    }

    // File Chooser
    private void fileOpenMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileOpenMenuActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                fileOrURLTextField.setText(file.getAbsolutePath());
                filePath = file.getAbsolutePath();
            } catch (Exception ex) {
                System.out.println("problem accessing file" + file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
        GUILogic(false);
    }//GEN-LAST:event_fileOpenMenuActionPerformed

    private void virusRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_virusRadioButtonActionPerformed
        radioOption = "VirusID";
        mapOption = null;
        updateDataLists();
    }//GEN-LAST:event_virusRadioButtonActionPerformed

    private void classRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classRadioButtonActionPerformed
        radioOption = "Classific";
        mapOption = virusClass;
        updateDataLists();
    }//GEN-LAST:event_classRadioButtonActionPerformed

    private void numberOfHostsRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberOfHostsRadioButtonActionPerformed
        radioOption = "HostNumbers";
        mapOption = sortedVirusHostFreq;
        updateDataLists();
    }//GEN-LAST:event_numberOfHostsRadioButtonActionPerformed

    private void fileOrURLTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileOrURLTextFieldKeyPressed
        // Dont really know what's going on here anymore, does URL validation
        boolean correctURL = true;
        boolean notHTML = true;
//        System.out.println("event keypressed: " + evt.getExtendedKeyCode());
        // if "Enter" is pressed:
        if (evt.getExtendedKeyCode() == 10) {
            try {
                String URL = getWebURLConfig();
                String currentURL = fileOrURLTextField.getText();
//                System.out.println(URL + ";;" + currentURL);
//                System.out.println("done with the 2 stirngs");
                // If the current URL is the same as the one in config.properties:
                if (URL != null && URL.equals(currentURL)) {
                    System.out.println("Current and config url are the same");
                    webpageCached = true;
                    GUILogic(true);
                } else {
                    try {
                        URL website = new URL(currentURL);
                        InputStreamReader inputRead = new InputStreamReader(website.openStream());
                        BufferedReader br = new BufferedReader(inputRead);
                        String firstLine = br.readLine();
//                        System.out.println("first line: "+firstLine);

                        if (firstLine.startsWith("<") || firstLine.equals("") || firstLine.isEmpty()) {
                            notHTML = false;
                        }
                    } catch (IOException exc) {
                        System.out.println("URL not found" + System.lineSeparator() + exc.toString());
                        correctURL = false;
                    }
                    if (correctURL && notHTML) {
                        // else: write the current URL in the config.properties
                        System.out.println("CorrectURL = true, else->if");
                        webpageCached = false;
                        setConfigFile();
                        GUILogic(true);
                    }
                }
            } catch (Exception exc) {
                System.out.println("Unknown error: \n" + exc.toString());
            }

//            System.out.println("End of fileOrURLTextField actionperformed");
        }

    }//GEN-LAST:event_fileOrURLTextFieldKeyPressed

    private void hostComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostComboBox1ActionPerformed
        // Items selection in the comboBox
        JComboBox<String> combo = (JComboBox<String>) evt.getSource();
        String selectedItem = (String) combo.getSelectedItem();
        hostComboBox1.setToolTipText(selectedItem);

        String[] itemInfo = selectedItem.split(" ");
        hostListRawData1 = ((String) hostAndVirus.get(itemInfo[0])).split(",");

        // If the other hostComboBox isn't filled, this gives an error
        if (hostBox2Initialised) {
            updateDataLists();
        }


    }//GEN-LAST:event_hostComboBox1ActionPerformed

    private void hostComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostComboBox2ActionPerformed
        // Items selection in the comboBox
        JComboBox<String> combo = (JComboBox<String>) evt.getSource();
        String selectedItem = (String) combo.getSelectedItem();
        hostComboBox2.setToolTipText(selectedItem);

        String[] itemInfo = selectedItem.split(" ");
        hostListRawData2 = ((String) hostAndVirus.get(itemInfo[0])).split(",");

        // This one gets filled after the first one so there is no error it can give anymore.
        updateDataLists();

    }//GEN-LAST:event_hostComboBox2ActionPerformed

    // This method fills the comboboxes with the HostIDs and names
    private void hostComboBoxesFilling(Map hostInfo) {
        hostComboBox1.setEnabled(true);
        hostComboBox2.setEnabled(true);
        hostComboBox1.removeAll();
        hostComboBox2.removeAll();

        // HostInfo = the map with hostTaxIDs as key and the lineage as value
        Iterator<Map.Entry<String, String>> data = hostInfo.entrySet().iterator();
        while (data.hasNext()) {
            Map.Entry<String, String> pair = data.next();
            hostComboBox1.addItem(pair.getKey() + " (" + pair.getValue() + ")");
            hostComboBox2.addItem(pair.getKey() + " (" + pair.getValue() + ")");
        }
        hostBox2Initialised = true;
    }

    private void viralClassComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viralClassComboBoxActionPerformed
        // Selection of the viral classification
        JComboBox<String> combo = (JComboBox<String>) evt.getSource();
        viralClassItem = (String) combo.getSelectedItem();
        viralClassComboBox.setToolTipText(viralClassItem);

        noneOption = "none".equals(viralClassItem);

        updateDataLists();

    }//GEN-LAST:event_viralClassComboBoxActionPerformed
// Updates the JLists to the chosen sorting option

    private void updateDataLists() {
        if (noneOption) {
            // Returns the raw data
            Set sortedListData1 = SpecificMethods.getSortedData(hostListRawData1, radioOption, mapOption);
            Set sortedListData2 = SpecificMethods.getSortedData(hostListRawData2, radioOption, mapOption);
            hostList1.setListData(VirusLogic.getArrayFromSet(sortedListData1));
            hostList2.setListData(VirusLogic.getArrayFromSet(sortedListData2));
            intersectionJList.setListData(VirusLogic.getArrayFromSet(VirusLogic.intersectionOf2Lists(sortedListData1, sortedListData2)));
        } else {
            // Returns the sorted data
            String[] referenceArray = ((String) virusClass.get(viralClassItem)).split(",");
            Set firstIterationListData1 = VirusLogic.intersectionOf2Lists(referenceArray, hostListRawData1);
            Set firstIterationListData2 = VirusLogic.intersectionOf2Lists(referenceArray, hostListRawData2);
//            Set firstIterationIntersection = VirusLogic.intersectionOf2Lists(firstIterationListData1, firstIterationListData2);

            Set secondIterationListData1 = SpecificMethods.getSortedData(VirusLogic.getArrayFromSet(firstIterationListData1), radioOption, mapOption);
            Set secondIterationListData2 = SpecificMethods.getSortedData(VirusLogic.getArrayFromSet(firstIterationListData2), radioOption, mapOption);
            Set secondIterationIntersection = VirusLogic.intersectionOf2Lists(secondIterationListData1, secondIterationListData2);

            hostList1.setListData(VirusLogic.getArrayFromSet(secondIterationListData1));
            hostList2.setListData(VirusLogic.getArrayFromSet(secondIterationListData2));
            intersectionJList.setListData(VirusLogic.getArrayFromSet(secondIterationIntersection));
        }
    }
// Webpage for virusID selections from the jLists.
    private void hostList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_hostList1ValueChanged
        if (evt.getValueIsAdjusting()) {
            String selected = hostList1.getSelectedValue();
//            System.out.println(selected);
            webPageVisual.showWebPage("http://www.genome.jp/virushostdb/" + selected);
        }
    }//GEN-LAST:event_hostList1ValueChanged

    private void hostList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_hostList2ValueChanged
        if (evt.getValueIsAdjusting()) {
            String selected = hostList2.getSelectedValue();
//            System.out.println(selected);
            webPageVisual.showWebPage("http://www.genome.jp/virushostdb/" + selected);
        }
    }//GEN-LAST:event_hostList2ValueChanged

    private void intersectionJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_intersectionJListValueChanged
        if (evt.getValueIsAdjusting()) {
            String selected = intersectionJList.getSelectedValue();
//            System.out.println(selected);
            webPageVisual.showWebPage("http://www.genome.jp/virushostdb/" + selected);
        }
    }//GEN-LAST:event_intersectionJListValueChanged

//<editor-fold defaultstate="collapsed" desc="Dont touch">
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
            * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VirusGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VirusGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VirusGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VirusGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VirusGUI().setVisible(true);
            }
        });
    }
//</editor-fold>

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton classRadioButton;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenuItem fileOpenMenu;
    private javax.swing.JTextField fileOrURLTextField;
    private javax.swing.JComboBox<String> hostComboBox1;
    private javax.swing.JComboBox<String> hostComboBox2;
    private javax.swing.JList<String> hostList1;
    private javax.swing.JList<String> hostList2;
    private javax.swing.JList<String> intersectionJList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JRadioButton numberOfHostsRadioButton;
    private javax.swing.ButtonGroup sortingOptionButtonGroup;
    private javax.swing.JComboBox<String> viralClassComboBox;
    private javax.swing.JRadioButton virusRadioButton;
    // End of variables declaration//GEN-END:variables

    private String filePath;
    private String viralClassItem = "none";
    private String radioOption = "VirusID";
    private Map hostInfo, hostAndVirus, virusClass, mapOption, hostFreq, sortedVirusHostFreq;
    private String[] hostListRawData1, hostListRawData2;
    private boolean hostBox2Initialised = false;

    private List<Virus> virusList;
    private boolean noneOption = true;

    private boolean webpageCached = false;
    private boolean madeCacheFiles = false;
}
